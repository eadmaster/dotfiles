#!/bin/sh

if [ "$#" -ge 1 ]; then

	echo "$0 example usages:"
	echo "  units conversion syntax: calc '15in to cm'"
	echo "  currency conversion syntax: calc '15usd to eur'"
	echo "  time math syntax: calc '17:10:27h - 14:24:26h' ; calc '13:56:12h - 1:25h to s'"  #  https://github.com/Qalculate/libqalculate/issues/5
	echo "    10:31 + 8:30 to time, now to utc, today − 5 days, 020-05-20 + 523d "
	echo "  percent calculation: 500€ − 20% "
	echo "  current calculation: 50ohm * 2A "
	echo "  bytes calculation: (5000 × byte) × 10 to MB"
	# more examples: https://github.com/Qalculate/libqalculate

	qalc -s "exp mode 0" "$@"  # most user-friendly, also provides units normalization (but supports less units than GNU units)
	[ $? -ne 127 ] && exit $?
	# TODO: disable checks for updating rates

	command -p units --history '' -v -1 "$@"  # --compact  # exponential notation by default, also provides units normalization (e.g. "12cm+1in")
	[ $? -ne 127 ] && exit $?

	command -p calc "$@"
	[ $? -ne 127 ] && exit $?

	awk "BEGIN { printf \"%g\n\", $@ }"  # exponential notation by default
	[ $? -ne 127 ] && exit $?
	
	echo "$@" | bc -l
	[ $? -ne 127 ] && exit $?
	
	echo "$@" | busybox bc -l
	[ $? -ne 127 ] && exit $?

	# TODO: more alternatives: python, ... https://unix.stackexchange.com/questions/480121/simple-command-line-calculator

	exit $?
fi

echo "$(basename $0) warn: no args detected, calling GUI calc..." >&2

#wine calc "$@"
#[ $? -ne 2 ] && exit $?

qalculate "$@"  # most feature-rich, can perform calculus, algebrae, units conversion
[ $? -ne 127 ] && exit $?

speedcrunch "$@" 
[ $? -ne 127 ] && exit $?

galculator "$@"  # nicer Windows-like UI
[ $? -ne 127 ] && exit $?

kcalc "$@"
[ $? -ne 127 ] && exit $?

xcalc "$@"
[ $? -ne 127 ] && exit $?

ycalc "$@"
[ $? -ne 127 ] && exit $?

#else
exit 127
