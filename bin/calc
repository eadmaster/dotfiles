#!/bin/sh

INPUT="$@"

if [ "$#" -ge 1 ]; then

	if which qalc >/dev/null 2>&1 ; then
		echo "$0 example usages:" >&2
		echo "  units conversion syntax: calc '15in to cm'" >&2
		echo "  currency conversion syntax: calc '15usd to eur'" >&2
		echo "  time math syntax: calc '17:10:27h - 14:24:26h' ; calc '13:56:12h - 1:25h to s'"  >&2 #  https://github.com/Qalculate/libqalculate/issues/5
		echo "    10:31 + 8:30 to time, now to utc, today − 5 days, 020-05-20 + 523d " >&2
		echo "  percent calculation: 500€ − 20% " >&2
		echo "  current calculation: 50ohm * 2A " >&2
		echo "  bytes calculation: (5000 × byte) × 10 to MB" >&2
		echo "  ---" >&2
		# more examples: https://github.com/Qalculate/libqalculate
	fi

	# via qalc -> most user-friendly, also provides units normalization (but supports less units than GNU units)
	qalc -s "exp mode 0" "$INPUT"  
	[ $? -ne 127 ] && exit $?
	# TODO: disable checks for updating rates
	
	# via units -> exponential notation by default, also provides units normalization (e.g. "12cm+1in") 
	units --history '' -v  "$INPUT"  # --compact -1  
	[ $? -ne 127 ] && exit $?

	# via calc -> c-style https://github.com/lcn2/calc
	command -p calc "$INPUT"
	[ $? -ne 127 ] && exit $?

	# via awk -> in busybox, exponential notation by default
	awk "BEGIN { printf \"%g\n\", $INPUT }"
	[ $? -ne 127 ] && exit $?
	
	# via bc -> in busybox
	echo "$INPUT" | bc -l
	[ $? -ne 127 ] && exit $?
	echo "$INPUT" | busybox bc -l
	[ $? -ne 127 ] && exit $?

	# TODO: more alternatives: python, ... https://unix.stackexchange.com/questions/480121/simple-command-line-calculator

	exit $?
fi

echo "$(basename $0) warn: no args detected, calling GUI calc..." >&2

#wine calc "$@"
#[ $? -ne 2 ] && exit $?

qalculate "$@"  # most feature-rich, can perform calculus, algebrae, units conversion
[ $? -ne 127 ] && exit $?

speedcrunch "$@" 
[ $? -ne 127 ] && exit $?

galculator "$@"  # nicer Windows-like UI
[ $? -ne 127 ] && exit $?

kcalc "$@"
[ $? -ne 127 ] && exit $?

xcalc "$@"
[ $? -ne 127 ] && exit $?

ycalc "$@"
[ $? -ne 127 ] && exit $?

#else
exit 127
