#!/bin/sh

# MEMO: add current user to dialot to be able to access the serial ports  https://askubuntu.com/questions/133235/how-do-i-allow-non-root-access-to-ttyusb0
# sudo usermod -a -G dialout $USER

#SPEED=9600
#SPEED=115200
SPEED=57600
#  The general observation is that the 3.3V devices usually run at 57600 whereas the 5V devices usually run on 115200 

[ -c /dev/ttyUSB0 ] && SERIAL_DEV=/dev/ttyUSB0
[ -c /dev/ttyUSB1 ] && SERIAL_DEV=/dev/ttyUSB1
[ -c /dev/ttyUSB2 ] && SERIAL_DEV=/dev/ttyUSB2
[ -c /dev/ttyACM0 ] && SERIAL_DEV=/dev/ttyACM0
[ -c /dev/ttyACM1 ] && SERIAL_DEV=/dev/ttyACM1
[ -c /dev/ttyACM2 ] && SERIAL_DEV=/dev/ttyACM2
if [ -z "$SERIAL_DEV" ]; then
	echo "$(basename $0) error: arduino device not found" >&2
	exit 1
fi

if [ ! -z "$1" ]; then
	# TODO: accept args like  https://github.com/todbot/arduino-serial/
	# single message mode using python
	sudo python -  <<EOF
import serial
import time
print("opening connection with $SERIAL_DEV @ $SPEED baud...")
arduino_ser = serial.Serial("$SERIAL_DEV", $SPEED)
print("ok, sleep for 7 seconds...")
time.sleep(7)
print("sending message: $1"+'\n')
arduino_ser.write("$1"+'\n')
# TODO: read the answer?
#arduino_ser.flush()
EOF
	exit $?
fi

echo "arduino-serial: starting terminal mode, press ctrl-x to exit..."
#some cmds: "setpindir 13 out; writepin 13 0"

# TODO: enable stdin redirection  https://stackoverflow.com/questions/3918032/bash-serial-i-o-and-arduino

sudo busybox microcom -s $SPEED $SERIAL_DEV
_ES=$? ; [ $_ES -ne 127 ] && exit $_ES

screen $SERIAL_DEV $SPEED
_ES=$? ; [ $_ES -ne 127 ] && exit $_ES

python -m serial.tools.miniterm --raw  $SERIAL_DEV $SPEED
_ES=$? ; [ $_ES -ne 127 ] && exit $_ES

# setup parameters from http://playground.arduino.cc/Interfacing/LinuxTTY
#stty -F $SERIAL_DEV cs8 $SPEED ignbrk -brkint -imaxbel -opost -onlcr -isig -icanon -iexten -echo -echoe -echok -echoctl -echoke noflsh -ixon -crtscts
# TODO: get settings via $(stty -a < $SERIAL_DEV)

		
#echo "unable to start an interactive shell, just echo your commands by echo-ing to $SERIAL_DEV" 
# TODO: elsa shellscript alternative using:
#  echo $LINE > $SERIAL_DEV
#  read -dx -t 1 response < $SERIAL_DEV
#  echo $response
# MEMO: as a rule, serial ports don't buffer data. If there's no client app to receive the bytes landing on the serial port, they will simply be discarded.  http://unix.stackexchange.com/questions/96718/how-do-i-use-a-serial-port-on-linux-like-a-pipe-or-netcat
