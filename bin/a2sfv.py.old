#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from datetime import datetime
import os
import stat
import zipfile
import tarfile

PROGRAM_NAME = os.path.basename(sys.argv[0])

sys.path.append( os.path.dirname(__file__) )  # try to load modules from subdirs

sys.stdout.reconfigure(encoding='utf-8')  # prevents encoding errors in py3.7+ https://stackoverflow.com/questions/4374455/how-to-set-sys-stdout-encoding-in-python-3/33470043

try:
	# faster, but not available on some platforms  https://stackoverflow.com/questions/44502855/why-is-zlib-crc32-faster-than-binascii-crc32
	from zlib import crc32
except:
	# slower
	from binascii import crc32
	
# optional imports
RAR = True
try:
    import rarfile
except:
	sys.stderr.write(PROGRAM_NAME + ": warn: rar file support disabled\n")
	RAR = False
# older version of pylzma
SEVENZIPOLD = True
try:
    from pylzma import py7zlib
except:
	SEVENZIPOLD = False
# latest version of pylzma
SEVENZIPNEW = True
try:
    import py7zlib
except:
	SEVENZIPNEW = False
if (( SEVENZIPOLD == False ) and ( SEVENZIPNEW == False )):
	sys.stderr.write(PROGRAM_NAME + ": warn: 7z file support disabled\n")

# args check
if(len(sys.argv)==1 or sys.argv[1] in ['-h', '--help'] or not os.path.isfile(sys.argv[1])):
	print("usage: " + PROGRAM_NAME + " file.ext")
	sys.stdout.write("supported archive formats: zip, tar, ")
	if RAR:
		sys.stdout.write("rar, ")
	if(SEVENZIPOLD or SEVENZIPNEW):
		sys.stdout.write("7z, ")
	print("")
	exit(1)

inputfilename = sys.argv[1]

class SevenZipFile(object): # zipfile.ZipInfo
	"""
	zipfile-like wrapper class for 7-zip file info descriptors
	"""
	def __init__(self, file_desc):
		if(not isinstance(file_desc, py7zlib.ArchiveFile)):
			return
		self.filename = file_desc.filename
		self.CRC = file_desc.digest
		self.file_size = file_desc.size
		# file_desc.lastwritetime, how to parse this long? http://www.joachim-bauch.de/projects/pylzma/comment-page-1/#comment-38146
		file_dt_obj = file_desc.lastwritetime.as_datetime()
		self.date_time = tuple((file_dt_obj.year, file_dt_obj.month, file_dt_obj.day, file_dt_obj.hour, file_dt_obj.minute, file_dt_obj.second))

class TarFile(object):
	"""
	zipfile-like wrapper class for Tar file info descriptors
	"""
	def __init__(self, file_desc, opened_tar_file):
		if(not isinstance(file_desc, tarfile.TarInfo)):
			return
		self.filename = file_desc.name
		self.CRC = 0
		#print(opened_tar_file.extractfile(file_desc.name))
		file_content_byte = None
		try:
			file_content_byte = opened_tar_file.extractfile(file_desc.name)
		except:
			pass
		if file_content_byte:
			# read the whole file inmemory (slow)
			file_content_byte = file_content_byte.read()
			self.CRC = crc32(file_content_byte)
		self.file_size = file_desc.size
		file_dt_obj = datetime.fromtimestamp(file_desc.mtime)
		self.date_time = tuple((file_dt_obj.year, file_dt_obj.month, file_dt_obj.day, file_dt_obj.hour, file_dt_obj.minute, file_dt_obj.second))
	
# open the file a fill archive_files_list
inputfile = None
archive_files_list = []
if(zipfile.is_zipfile(inputfilename)):
	inputfile = zipfile.ZipFile(inputfilename, 'r')
	archive_files_list = inputfile.infolist()
elif(RAR and rarfile.is_rarfile(inputfilename)):
	inputfile = rarfile.RarFile(inputfilename, 'r')
	archive_files_list = inputfile.infolist()
elif((SEVENZIPOLD or SEVENZIPNEW) and inputfilename.endswith(".7z")):
	inputfile = py7zlib.Archive7z(open(inputfilename, 'rb'))
	archive_files_list = []
	for f in inputfile.files:
		# wrap up the objects with a zipfile-like API
		archive_files_list.append( SevenZipFile(f) )
elif(tarfile.is_tarfile(inputfilename)):
	sys.stderr.write(PROGRAM_NAME + ": warn: tar files have no builtin hashes, need to extract the archive in memory (slow)\n")
	inputfile = tarfile.open(inputfilename, 'r')
	archive_files_members = inputfile.getmembers()
	for m in archive_files_members:
		if m.isdir():
			continue  # skip dirs
		archive_files_list.append( TarFile(m, inputfile) )
else:
	sys.stderr.write(PROGRAM_NAME + ": fatal error: input archive format not supported\n")
	exit(1)


# OPTIONAL HEADER
print("; Generated by " + PROGRAM_NAME + " on " + datetime.now().strftime("%Y-%m-%d at %H:%M.%S"))
print("; Written by eadmaster - http://eadmaster.altervista.org/")
print(";")
for f in archive_files_list:
	#if(stat.S_IFDIR(f.external_attr)):
	#if((f.external_attr & stat.S_IFMT)==stat.S_IFDIR): #req. py3.x
	if(f.filename.endswith("/")):
		continue # skip directories
	print("; %12s  %s %s" % ( f.file_size, datetime(*f.date_time).strftime("%H:%M.%S %Y-%m-%d"), f.filename))
# END OF OPTIONAL HEADER

for f in archive_files_list:
	try:
		if(f.filename.endswith("/")):
			continue # skip directories
		print("%s %08X " % ( f.filename, f.CRC ) )
	except:
		continue
